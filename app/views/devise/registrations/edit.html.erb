<h2><%= t(".title", resource: resource.model_name.human) %></h2>

<%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <div class="row">
      <img id="avatar" class="centered-and-cropped" width="100" height="100" style="border-radius:50%" src="<%= resource.avatar %>"> 
      <button type="button" class="btn" onclick="event.preventDefault(); document.getElementById('user_photo').click()">Change avatar</button>
    </div>
    <%= f.input :email, 
                required: true,
                autofocus: true %>
    <%= f.input :username, 
                required: true %>

    <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
      <p><%= t(".currently_waiting_confirmation_for_email", email: resource.unconfirmed_email) %></p>
    <% end %>

    <%= f.input :password,
                hint: t(".leave_blank_if_you_don_t_want_to_change_it"),
                required: false,
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :password_confirmation,
                required: false,
                input_html: { autocomplete: "new-password" } %>
    <%= f.input :current_password,
                hint: t(".we_need_your_current_password_to_confirm_your_changes"),
                required: true,
                input_html: { autocomplete: "current-password" } %>
    <%= f.file_field :photo, direct_upload: true, class: "hiddenfile" %>  
  </div>

  <div class="form-actions">
    <%= f.button :submit, t(".update"), class: 'btn btn-primary'  %>
  </div>
<% end %>

<h3><%= t(".cancel_my_account") %></h3>

<p><%= t(".unhappy") %> <%= link_to t(".cancel_my_account"), registration_path(resource_name), data: { confirm: t(".are_you_sure") }, method: :delete %></p>

<%= link_to t("devise.shared.links.back"), :back %>

<% content_for :js do %>
<script>
const input = document.querySelector('input[type=file]')

input.addEventListener('change', (event) => {
  Array.from(input.files).forEach(file => uploadFile(file))
  // clear uploaded files from the input
  input.value = null
})

const uploadFile = (file) => {
  // your form needs the file_field direct_upload: true, which
  //  provides data-direct-upload-url
  const url = input.dataset.directUploadUrl;
  ImmediateUploader.default.upload (file, url)
    .then(blob => {
      // get blob.signed_id and add it to form values to submit form
//      const hiddenField = document.createElement('input')
//      hiddenField.setAttribute("type", "hidden");
//      hiddenField.setAttribute("value", blob.signed_id);
//      hiddenField.name = input.name
//      document.querySelector('form').appendChild(hiddenField)
      // Update new avatar in browser
      document.getElementById('avatar').src = '/rails/active_storage/blobs/' + blob.signed_id + '/' + blob.filename;
      // Update photo in Database
      axios.post('/users/photo', { 'photo': blob.signed_id }).then(response => {});
    });
}
</script>
<% end %>
