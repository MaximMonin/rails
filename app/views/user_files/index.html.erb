<div class="container">
   <div class="col-md-12">
     <div class="row filetop">
       <h4>'messages.Files'</h4>
       <div class="btnupdate">
           <button type="button" class="btn btn-primary btn-sm" onclick="event.preventDefault(); Event.emit('newfileadded', {});">'messages.Update')</button>
       </div>  
       <div class="form-check ml-auto">
           <input type="checkbox" class="form-check-input" id="EditMode" onclick="if (this.checked) {Event.emit('fileseditmode', {})} else {Event.emit('filesviewmode', {})};">
           <label class="form-check-label" for="EditMode">'messages.EditMode'</label>
       </div>  
     </div>
   </div>
   <ul class="nav nav-tabs">
     <li class="nav-item">
       <a class="nav-link active" dusk="photo-tab" data-toggle="tab" href="#photo">'messages.Photos'</a>
     </li>
     <li class="nav-item">
       <a class="nav-link" dusk="video-tab" data-toggle="tab" href="#video">'messages.Videos'</a>
     </li>
     <li class="nav-item">
       <a class="nav-link" dusk="doc-tab" data-toggle="tab" href="#docs">'messages.Docs'</a>
     </li>
     <li class="nav-item">
       <a class="nav-link" dusk="upload-tab" data-toggle="tab" href="#upload" onclick="Dropzone.forElement('#documentDropzone').files.forEach(function(file) { 
                                                                     file.previewElement.remove(); });">'messages.UploadNew'</a>
     </li>
   </ul>
   <div class="tab-content">
     <div class="tab-pane fade show active" id="photo">
       <div class="myfiles2">
         <my-photo></my-photo>
       </div>
     </div>
     <div class="tab-pane fade" id="video">
       <div class="myfiles2">
         <my-video></my-video>
       </div>
     </div>
     <div class="tab-pane fade" id="docs">
       <div class="myfiles2">
         <my-docs></my-doc>
       </div>
     </div>
     <div class="tab-pane fade" id="upload">
       <div class="myfiles">
         <h5 class="page-heading">'upload.title'</h5>
         <form method="post" action='/upload/local'
                  enctype="multipart/form-data" class="dropzone" id="documentDropzone">
                <div class="dz-message">
                    <div class="col-xs-8">
                        <div class="message">
                            <p>'upload.message'</p>
                        </div>
                    </div>
                </div>
                <div class="fallback">
                    <input type="file" name="file" multiple>
                </div>
         </form>
       </div>
     </div>
   </div>
</div>

<% content_for :js do %>
<script>
  var uploadedDocumentMap = {};
  const csrf = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var filedir = 'user';
  Dropzone.options.documentDropzone = {
    url: '/upload/local?filedir=' + filedir + '&' + 'action=SaveDatabase',
    parallelUploads: 3,
    maxFilesize: 500, // MB
    chunking: true,
    chunkSize: 1000000, // Bytes 
    parallelChunkUploads: false, // true,
    retryChunks: true,
    retryChunksLimit: 3,
    addRemoveLinks: true,
    dictFileTooBig: '"upload.FileTooBig"',
    dictResponseError: '"upload.error"',
    dictCancelUpload: '"upload.cancel"',
    dictCancelUploadConfirmation: '"upload.cancelConfirmation"',
    dictUploadCanceled: '"upload.canceled"',
    dictRemoveFile: '"upload.remove"',
    headers: {
      'X-CSRF-TOKEN': csrf
    },
    success: function (file, response) {
      if (response.name) {
        uploadedDocumentMap[file.name] = response.path + '/' + response.name
      }
      Event.emit('newfileadded', {});
    },
    removedfile: function (file) {
      file.previewElement.remove()
      var name = ''
      name = uploadedDocumentMap[file.name]
      axios.post('/upload/local/delete', { 'file': name}).then(response => {});
      Event.emit('newfileadded', {});
    },
    init: function () {
    }
  }
</script>
<% end %>
